#!/usr/bin/env gura
//=============================================================================
// getterphoto
// Copyright (C) 2014 ypsitau
//=============================================================================
import(wx)
import(re)
import(yaml)
import(png)
import(msico)
import(resource)
import(translate)

Version = '1.0.1'

//-----------------------------------------------------------------------------
// Control ID
//-----------------------------------------------------------------------------
[
] = wx.ID_HIGHEST..

//-----------------------------------------------------------------------------
// Global variables
//-----------------------------------------------------------------------------
g = module {
	patternImgList:public = ['*.jpg']
	patternAviList:public = ['*.avi', '*.mov']
	charsAtoZ:public = chr(ord('A')..ord('Z'))
	//fileNameCfg:public = path.join(sys.cfgdir, 'getterphoto.yml')
	fileNameCfg:public		= 'getterphoto.yml'
	fileNameIcon:public		= 'getterphoto.ico'
	cfg:public = %{}
	xFrame:public				= -1
	yFrame:public				= -1
	wdFrame:public				= 600
	htFrame:public				= 700
	dirNameSrc:public			= ''
	dirNameDstBase:public		= path.join(sys.appdir, 'getterphoto')
	dirNameStamperTgt:public	= ''
	imageList:public			= nil
	imgImage:public				= -1
	imgBoxChecked:public		= -1
	imgBoxUnckecked:public		= -1
	imgBoxDisabled:public		= -1
}
//-----------------------------------------------------------------------------
// LoadConfig / SaveConfig
//-----------------------------------------------------------------------------
LoadConfig() = {
	try {
		g.cfg = yaml.read(g.fileNameCfg)
		g.xFrame:number		= g.cfg['xFrame']
		g.yFrame:number		= g.cfg['yFrame']
		g.wdFrame:number	= g.cfg['wdFrame']
		g.htFrame:number	= g.cfg['htFrame']
		g.dirNameSrc		= g.cfg['dirNameSrc']
		g.dirNameDstBase	= g.cfg['dirNameDstBase']
		g.dirNameStamperTgt	= g.cfg['dirNameStamperTgt']
	} catch {}
}

SaveConfig() = {
	g.cfg['xFrame']				= g.xFrame
	g.cfg['yFrame']				= g.yFrame
	g.cfg['wdFrame']			= g.wdFrame
	g.cfg['htFrame']			= g.htFrame
	g.cfg['dirNameSrc']			= g.dirNameSrc
	g.cfg['dirNameDstBase']		= g.dirNameDstBase
	g.cfg['dirNameStamperTgt']	= g.dirNameStamperTgt
	yaml.write(g.fileNameCfg, g.cfg)
}

InitializeResource() = {
	I(src:binary) = image(base64.reader(src))
	g.imageList = wx.ImageList(16, 16, true)
	g.imgImage:public			= g.imageList.Add(I(resource.Image_png))
	g.imgBoxChecked:public		= g.imageList.Add(I(resource.BoxChecked_png))
	g.imgBoxUnckecked:public	= g.imageList.Add(I(resource.BoxUnchecked_png))
	g.imgBoxDisabled:public		= g.imageList.Add(I(resource.BoxDisabled_png))
}

//-----------------------------------------------------------------------------
// MakeUniqPathName
//-----------------------------------------------------------------------------
MakeUniqPathName(pathName:string, dirNameDstBase:string, getterFlag:boolean):map = {
	try {
		stat = path.stat(pathName)
	} catch { stat = nil }
	(!stat || stat.isdir) && return(nil)
	charsAtoZ = chr(ord('A')..ord('Z'))
	try { exif = jpeg.exif(pathName) } catch { exif = nil }
	if (exif) {
		try {
			exif.DateTime.value.match(r'(\d{4}):(\d{2}):(\d{2})\s+(\d{2}):(\d{2}):(\d{2})') {|m|
				[year, month, day, hour, min, sec] = int(m[1..6])
			}
		} catch { exif = nil }
	}
	if (!exif) {
		mtime = stat.mtime
		[year, month, day, hour, min, sec] = \
			[mtime.year, mtime.month, mtime.day, mtime.hour, mtime.min, mtime.sec]
	}
	if (getterFlag) {
		dirNameDst = path.join(dirNameDstBase, '%04d%02d%02d xxxx' % [year, month, day])
		!path.exists(dirNameDst) && fs.mkdir(dirNameDst):tree
	} else {
		dirNameDst = dirNameDstBase
	}
	[dirName, fileName] = path.split(pathName)
	[baseName, extName] = path.splitext(fileName)
	cross (upper in charsAtoZ, lower in charsAtoZ) {
		fileNameUniq = format('%04d_%02d%02d_%02d%02d%02d%s%s.%s',
			year, month, day, hour, min, sec, upper, lower, extName)
		pathNameUniq = path.join(dirNameDst, fileNameUniq)
		!path.exists(pathNameUniq) && break
		getterFlag && open(pathName).compare(pathNameUniq) && return(nil)
		pathNameUniq = nil
	}
	pathNameUniq
}

//-----------------------------------------------------------------------------
// Page_Getter
//-----------------------------------------------------------------------------
Page_Getter = class(wx.Panel) {
	wdLabel = 80
	__init__(parent:wx.Window) = {|parent|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.AddSpacer(4)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.LEFT | wx.RIGHT, 2))
		outerBox.AddSpacer(4)
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand())
			wx.StaticText(this, wx.ID_ANY, 'Source'$, size => wx.Size(wdLabel, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Align(wx.ALIGN_CENTER_VERTICAL))
			}
			wx.ComboBox(this, wx.ID_ANY, '', style => wx.CB_READONLY) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Expand())
				this.comboSourceDirNames = ctrl
				ctrl.Bind(wx.EVT_COMBOBOX) {
					g.dirNameSrc= ctrl.GetStringSelection()
					this.UpdateFileNames()
				}
			}
			wx.Button(this, wx.ID_ANY, 'Refresh'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 2))
				ctrl.Bind(wx.EVT_BUTTON) {
					this.UpdateSourceDirNames()
				}
			}
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand().Border(wx.TOP, 2))
			wx.StaticText(this, wx.ID_ANY, 'Destination'$, size => wx.Size(wdLabel, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Align(wx.ALIGN_CENTER_VERTICAL))
			}
			wx.TextCtrl(this, wx.ID_ANY, '') {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Expand())
				this.textDirNameDstBase = ctrl
			}
			wx.Button(this, wx.ID_ANY, '...', size => wx.Size(20, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 2))
				ctrl.Bind(wx.EVT_BUTTON) {
					dirName = this.textDirNameDstBase.GetValue()
					style = wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST
					dlg = wx.DirDialog(this,
								'Choose a destination directory'$
								dirName, style)
					if (dlg.ShowModal() == wx.ID_OK) {
						dirName = dlg.GetPath()
						this.textDirNameDstBase.SetValue(dirName)
						g.dirNameDstBase = dirName
					}
				}
			}
		}
		wx.ListCtrl(this, wx.ID_ANY, style => wx.LC_REPORT) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.TOP, 2))
			ctrl.SetImageList(g.imageList, wx.IMAGE_LIST_SMALL)
			ctrl.InsertColumn(0.., ['Source'$, 'Destination'$])
			ctrl.Bind(wx.EVT_SIZE) {|event|
				size = event.GetSize()
				width = size.GetWidth() - 20
				wdColumn = width / 2
				ctrl.SetColumnWidth(0, wdColumn)
				width -= wdColumn
				ctrl.SetColumnWidth(1, width)
				event.Skip()
			}
			ctrl.GetFont() {|font|
				this.fontNormal = font
			}
			ctrl.GetFont() {|font|
				font.SetWeight(wx.FONTWEIGHT_BOLD)
				this.fontBold = font
			}
			this.listFileNames = ctrl
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand().Border(wx.TOP, 2))
			wx.Button(this, wx.ID_ANY, 'Get Photo'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand())
				this.btnGetPhoto = ctrl
				ctrl.Bind(wx.EVT_BUTTON) {
					dirNameDstBase = this.textDirNameDstBase.GetValue()
					g.dirNameDstBase = dirNameDstBase
					indices = range(this.listFileNames.GetItemCount())
					this.GetPhoto(dirNameDstBase:string, indices)
				}
			}
			wx.Gauge(this, wx.ID_ANY, 100, style => wx.GA_HORIZONTAL) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.LEFT, 2))
				this.gauge = ctrl
			}
		}
		this.textDirNameDstBase.SetValue(g.dirNameDstBase)
		this.UpdateSourceDirNames()
	}
	UpdateSourceDirNames() = {
		dirNames = path.join(g.charsAtoZ + ':', 'DCIM')
		dirNames = dirNames.filter(path.exists(dirNames)):list
		this.comboSourceDirNames.Clear()
		if (dirNames.len() == 0) {
			this.comboSourceDirNames.SetValue('')
		} else {
			this.comboSourceDirNames.Append(dirNames)
			idx = dirNames.find(g.dirNameSrc):index || 0
			this.comboSourceDirNames.Select(idx)
		}
		this.UpdateFileNames()
	}
	UpdateFileNames() = {
		this.listFileNames.DeleteAllItems()
		dirName = this.comboSourceDirNames.GetValue()
		if (dirName == '') {
			this.btnGetPhoto.Enable(false)
			return
		}
		pathNames = path.walk(dirName, nil, g.patternImgList*,
								g.patternAviList*):file:list
		dirNameDstBase = this.textDirNameDstBase.GetValue()
		this.pathNames = pathNames
		pathNames.each {|pathName, idx|
			pathNameDst = MakeUniqPathName(pathName, dirNameDstBase, true)
			wx.ListItem {|item|
				item.SetId(idx)
				item.SetMask(wx.LIST_MASK_TEXT)
				pathNameDst && item.SetFont(this.fontBold)
				item.SetText(path.filename(pathName))
				item.SetImage(g.imgImage)
				this.listFileNames.InsertItem(item)
			}
			wx.ListItem {|item|
				item.SetId(idx)
				item.SetColumn(1)
				item.SetText(path.filename(pathNameDst || '(copied one exists)'$))
				this.listFileNames.SetItem(item)
			}
		}
		this.btnGetPhoto.Enable(!pathNames.isempty())
	}
	GetPhoto(dirNameDstBase:string, idx:number):map = {
		pathName = this.pathNames[idx]
		pathNameDst = MakeUniqPathName(pathName, dirNameDstBase, true)
		!pathNameDst && return
		this.listFileNames.SetItemFont(idx, this.fontNormal)
		this.listFileNames.Refresh()
		this.listFileNames.Update()
		//this.listFileNames.SetItemState(idx,
		//			wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED,
		//			wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED)
		this.listFileNames.EnsureVisible(idx)
		bytesProgress = 0
		stat = path.stat(pathName)
		stream.copy(pathName, pathNameDst):finalize {|buff|
			if (stat.size > 0) {
				this.gauge.SetValue(bytesProgress * 100 / stat.size)
				bytesProgress += buff.len()
			}
			this.Update()
			wx.App.GetInstance().Yield()
		}
		//this.listFileNames.SetItemState(idx,
		//			wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED,
		//			0)
		this.gauge.SetValue(0)
		this.Update()
	}
}

//-----------------------------------------------------------------------------
// Frame
//-----------------------------------------------------------------------------
Frame = class(wx.Frame) {
	__init__(title:string) = {|nil, wx.ID_ANY, title,
			pos => wx.Point(g.xFrame, g.yFrame), size => wx.Size(g.wdFrame, g.htFrame)|
		this.SetIcon(wx.Icon(g.fileNameIcon, wx.BITMAP_TYPE_ICO))
		panel = wx.Panel(this)
		outerBox = wx.BoxSizer(wx.VERTICAL)
		panel.SetSizer(outerBox)
		wx.Notebook(panel, wx.ID_ANY) {|note|
			note.SetPadding(wx.Size(8, 4))
			outerBox.Add(note, wx.SizerFlags(1).Expand())
			note.AddPage(Page_Getter(note), 'Getter'$, false, -1)
			//note.AddPage(Page_Stamper(note), 'Stamper'$, false, -1)
		}
		this.Bind(wx.EVT_MOVE) {|event|
			this.UpdateSizePosInfo()
			event.Skip()
		}
		this.Bind(wx.EVT_SIZE) {|event|
			this.UpdateSizePosInfo()
			event.Skip()
		}
	}
	UpdateSizePosInfo() = {
		(this.IsIconized() || this.IsMaximized()) && return
		[g.xFrame, g.yFrame] = this.GetScreenPositionXY()
		[g.wdFrame, g.htFrame] = this.GetSizeWH()
	}
}

//-----------------------------------------------------------------------------
// App
//-----------------------------------------------------------------------------
App = class(wx.App) {
	OnInit() = {
		LoadConfig()
		InitializeResource()
		frame = Frame('Getter Photo'$)
		frame.Show()
		g.frame = frame
		true
	}
	OnExit() = {
		SaveConfig()
		0
	}
}

wx.IMPLEMENT_APP(App)
