#!/usr/bin/env gura
//=============================================================================
// getterphoto
// Copyright (C) 2014 ypsitau
//=============================================================================
import(wx)
import(re)
import(yaml)
import(png)
import(msico)
import(resource)
import(translate)

Version = '1.0.1'

//-----------------------------------------------------------------------------
// Control ID
//-----------------------------------------------------------------------------
[
	ID_TE_DirNameSrc, ID_BTN_DirNameSrc,
	ID_TE_DirNameDst, ID_BTN_DirNameDst,
] = wx.ID_HIGHEST..

//-----------------------------------------------------------------------------
// Global variables
//-----------------------------------------------------------------------------
g = module {
	patternImgList:public = ['*.jpg']
	patternAviList:public = ['*.avi', '*.mov']
	charsAtoZ:public = chr(ord('A')..ord('Z'))
	//fileNameCfg:public = path.join(sys.cfgdir, 'getterphoto.yml')
	fileNameCfg:public		= 'getterphoto.yml'
	fileNameIcon:public		= 'getterphoto.ico'
	cfg:public = %{}
	xFrame:public				= -1
	yFrame:public				= -1
	wdFrame:public				= 600
	htFrame:public				= 700
	dirNameSrc:public			= ''
	dirNameDst:public			= path.join(sys.appdir, 'getterphoto')
	dirNameStamperTgt:public	= ''
	imageList:public			= nil
	imgImage:public				= -1
	imgBoxChecked:public		= -1
	imgBoxUnckecked:public		= -1
	imgBoxDisabled:public		= -1
	doneFlag:public				= false
}

//-----------------------------------------------------------------------------
// LoadConfig / SaveConfig
//-----------------------------------------------------------------------------
LoadConfig() = {
	try {
		g.cfg = yaml.read(g.fileNameCfg)
		g.xFrame:number		= g.cfg['xFrame']
		g.yFrame:number		= g.cfg['yFrame']
		g.wdFrame:number	= g.cfg['wdFrame']
		g.htFrame:number	= g.cfg['htFrame']
		g.dirNameSrc		= g.cfg['dirNameSrc']
		g.dirNameDst		= g.cfg['dirNameDst']
		g.dirNameStamperTgt	= g.cfg['dirNameStamperTgt']
	} catch {}
}

SaveConfig() = {
	g.cfg['xFrame']				= g.xFrame
	g.cfg['yFrame']				= g.yFrame
	g.cfg['wdFrame']			= g.wdFrame
	g.cfg['htFrame']			= g.htFrame
	g.cfg['dirNameSrc']			= g.dirNameSrc
	g.cfg['dirNameDst']			= g.dirNameDst
	g.cfg['dirNameStamperTgt']	= g.dirNameStamperTgt
	yaml.write(g.fileNameCfg, g.cfg)
}

InitializeResource() = {
	I(src:binary) = image(base64.reader(src))
	g.imageList = wx.ImageList(16, 16, true)
	g.imgImage:public			= g.imageList.Add(I(resource.Image_png))
	g.imgBoxChecked:public		= g.imageList.Add(I(resource.BoxChecked_png))
	g.imgBoxUnckecked:public	= g.imageList.Add(I(resource.BoxUnchecked_png))
	g.imgBoxDisabled:public		= g.imageList.Add(I(resource.BoxDisabled_png))
	g.imgCameraCopy:public		= g.imageList.Add(I(resource.camera_go_png))
	g.imgDriveEdit:public		= g.imageList.Add(I(resource.drive_edit_png))
}

//-----------------------------------------------------------------------------
// MakeUniqPathName
//-----------------------------------------------------------------------------
MakeUniqPathName(pathName:string, dirNameDst:string, getterFlag:boolean):map = {
	try {
		stat = path.stat(pathName)
	} catch { stat = nil }
	(!stat || stat.isdir) && return(nil)
	charsAtoZ = chr(ord('A')..ord('Z'))
	try { exif = jpeg.exif(pathName) } catch { exif = nil }
	if (exif) {
		try {
			exif.DateTime.value.match(r'(\d{4}):(\d{2}):(\d{2})\s+(\d{2}):(\d{2}):(\d{2})') {|m|
				[year, month, day, hour, min, sec] = int(m[1..6])
			}
		} catch { exif = nil }
	}
	if (!exif) {
		mtime = stat.mtime
		[year, month, day, hour, min, sec] = \
			[mtime.year, mtime.month, mtime.day, mtime.hour, mtime.min, mtime.sec]
	}
	if (getterFlag) {
		dirNameDstSub = path.join(dirNameDst, '%04d%02d%02d xxxx' % [year, month, day])
		!path.exists(dirNameDstSub) && fs.mkdir(dirNameDstSub):tree
	} else {
		dirNameDstSub = dirNameDstBase
	}
	[dirName, fileName] = path.split(pathName)
	[baseName, extName] = path.splitext(fileName)
	cross (upper in charsAtoZ, lower in charsAtoZ) {
		fileNameUniq = format('%04d_%02d%02d_%02d%02d%02d%s%s.%s',
			year, month, day, hour, min, sec, upper, lower, extName)
		pathNameUniq = path.join(dirNameDstSub, fileNameUniq)
		!path.exists(pathNameUniq) && break
		getterFlag && open(pathName).compare(pathNameUniq) && return(nil)
		pathNameUniq = nil
	}
	pathNameUniq
}

//-----------------------------------------------------------------------------
// Page_Getter
//-----------------------------------------------------------------------------
Page_Getter = class(wx.Panel) {
	wdLabel = 100
	__init__(parent:wx.Window) = {|parent|
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.AddSpacer(4)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.LEFT | wx.RIGHT, 2))
		outerBox.AddSpacer(4)
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand())
			wx.StaticText(this, wx.ID_ANY, 'Source Folder'$, size => wx.Size(wdLabel, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Align(wx.ALIGN_CENTER_VERTICAL))
			}
			wx.TextCtrl(this, ID_TE_DirNameSrc, '', style => wx.TE_READONLY) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Expand())
				this.textDirNameSrc = ctrl
			}
			wx.Button(this, ID_BTN_DirNameSrc, '...', size => wx.Size(20, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 2))
			}
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand().Border(wx.TOP, 4))
			wx.StaticText(this, wx.ID_ANY, 'Destination Folder'$, size => wx.Size(wdLabel, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Align(wx.ALIGN_CENTER_VERTICAL))
			}
			wx.TextCtrl(this, ID_TE_DirNameDst, '', style => wx.TE_READONLY) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Expand())
				this.textDirNameDst = ctrl
			}
			wx.Button(this, ID_BTN_DirNameDst, '...', size => wx.Size(20, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.LEFT, 2))
			}
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand().Border(wx.TOP, 4))
			wx.Button(this, wx.ID_ANY, 'Get Photo'$, size => wx.Size(wdLabel, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Expand())
				this.btnGetPhoto = ctrl
				ctrl.Bind(wx.EVT_BUTTON) {
					dirNameDst = this.textDirNameDst.GetValue()
					g.dirNameDst = dirNameDst
					indices = range(this.listFileNames.GetItemCount())
					this.GetPhoto(dirNameDst:string, indices)
				}
			}
			wx.Gauge(this, wx.ID_ANY, 100, style => wx.GA_HORIZONTAL) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.LEFT, 2))
				this.gauge = ctrl
			}
		}
		wx.ListCtrl(this, wx.ID_ANY, style => wx.LC_REPORT) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags(1).Expand().Border(wx.TOP, 4))
			ctrl.SetImageList(g.imageList, wx.IMAGE_LIST_SMALL)
			ctrl.InsertColumn(0.., ['Source File'$, 'Destination File'$])
			ctrl.Bind(wx.EVT_SIZE) {|event|
				size = event.GetSize()
				width = size.GetWidth() - 20
				wdColumn = width / 2
				ctrl.SetColumnWidth(0, wdColumn)
				width -= wdColumn
				ctrl.SetColumnWidth(1, width)
				event.Skip()
			}
			ctrl.GetFont() {|font|
				this.fontNormal = font
			}
			ctrl.GetFont() {|font|
				font.SetWeight(wx.FONTWEIGHT_BOLD)
				this.fontBold = font
			}
			this.listFileNames = ctrl
		}
		this.Bind(wx.EVT_BUTTON, ID_BTN_DirNameSrc) {
			dirNameSrc = this.textDirNameSrc.GetValue()
			style = wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST
			dlg = wx.DirDialog(this, 'Choose a source folder'$, dirNameSrc, style)
			if (dlg.ShowModal() == wx.ID_OK) {
				dirNameSrc = dlg.GetPath()
				this.textDirNameSrc.SetValue(dirNameSrc)
				g.dirNameSrc = dirNameSrc
				this.UpdateFileNames()
			}
		}
		this.Bind(wx.EVT_BUTTON, ID_BTN_DirNameDst) {
			dirNameDst = this.textDirNameDst.GetValue()
			style = wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST
			dlg = wx.DirDialog(this, 'Choose a destination folder'$, dirNameDst, style)
			if (dlg.ShowModal() == wx.ID_OK) {
				dirNameDst = dlg.GetPath()
				this.textDirNameDst.SetValue(dirNameDst)
				g.dirNameDst = dirNameDst
			}
		}
		this.textDirNameSrc.SetValue(g.dirNameSrc)
		this.textDirNameDst.SetValue(g.dirNameDst)
		//this.UpdateFileNames()
	}
	UpdateFileNames() = {
		this.listFileNames.DeleteAllItems()
		dirName = this.textDirNameSrc.GetValue()
		if (dirName == '') {
			this.btnGetPhoto.Enable(false)
			return
		}
		pathNames = path.walk(dirName, nil, g.patternImgList*, g.patternAviList*):file
		dirNameDst = this.textDirNameDst.GetValue()
		pathNames.each {|pathName, idx|
			pathNameDst = MakeUniqPathName(pathName, dirNameDst, true)
			wx.ListItem {|item|
				item.SetId(idx)
				item.SetMask(wx.LIST_MASK_TEXT)
				pathNameDst && item.SetFont(this.fontBold)
				item.SetText(path.filename(pathName))
				item.SetImage(g.imgImage)
				this.listFileNames.InsertItem(item)
			}
			wx.ListItem {|item|
				item.SetId(idx)
				item.SetColumn(1)
				item.SetText(path.filename(pathNameDst || '(copied one exists)'$))
				this.listFileNames.SetItem(item)
			}
			if (idx % 10 == 0) {
				this.listFileNames.EnsureVisible(idx)
				this.Refresh()
				this.Update()
			}
			wx.App.GetInstance().Yield()
			g.doneFlag && return
		}
		this.pathNames = [pathNames]
		this.btnGetPhoto.Enable(!this.pathNames.isempty())
		this.listFileNames.EnsureVisible(0)
	}
	GetPhoto(dirNameDst:string, idx:number):map = {
		this.listFileNames.SetFocus()
		pathName = this.pathNames[idx]
		pathNameDst = MakeUniqPathName(pathName, dirNameDst, true)
		!pathNameDst && return
		this.listFileNames.SetItemFont(idx, this.fontNormal)
		this.listFileNames.Refresh()
		this.listFileNames.Update()
		this.listFileNames.EnsureVisible(idx)
		bytesProgress = 0
		stat = path.stat(pathName)
		this.listFileNames.SetItemState(idx,
					wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED,
					wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED)
		this.Update()
		/*
		stream.copy(pathName, pathNameDst):finalize {|buff|
			if (stat.size > 0) {
				this.gauge.SetValue(bytesProgress * 100 / stat.size)
				bytesProgress += buff.len()
			}
			this.Update()
			wx.App.GetInstance().Yield()
		}
		*/
		os.sleep(.5)
		this.listFileNames.SetItemState(idx, 0,
					wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED)
		this.gauge.SetValue(0)
		this.Update()
	}
}

//-----------------------------------------------------------------------------
// Frame
//-----------------------------------------------------------------------------
Frame = class(wx.Frame) {
	__init__(title:string) = {|nil, wx.ID_ANY, title,
			pos => wx.Point(g.xFrame, g.yFrame), size => wx.Size(g.wdFrame, g.htFrame)|
		this.SetIcon(wx.Icon(g.fileNameIcon, wx.BITMAP_TYPE_ICO))
		panel = wx.Panel(this)
		outerBox = wx.BoxSizer(wx.VERTICAL)
		panel.SetSizer(outerBox)
		wx.Notebook(panel, wx.ID_ANY) {|note|
			note.SetImageList(g.imageList)
			note.SetPadding(wx.Size(8, 4))
			outerBox.Add(note, wx.SizerFlags(1).Expand())
			note.AddPage(Page_Getter(note), 'Getter'$, false, g.imgCameraCopy)
			//note.AddPage(Page_Stamper(note), 'Stamper'$, false, g.imgDriveEdit)
		}
		this.Bind(wx.EVT_CLOSE) {|event|
			g.doneFlag = true
			event.Skip()
		}
		this.Bind(wx.EVT_MOVE) {|event|
			this.UpdateSizePosInfo()
			event.Skip()
		}
		this.Bind(wx.EVT_SIZE) {|event|
			this.UpdateSizePosInfo()
			event.Skip()
		}
	}
	UpdateSizePosInfo() = {
		(this.IsIconized() || this.IsMaximized()) && return
		[g.xFrame, g.yFrame] = this.GetScreenPositionXY()
		[g.wdFrame, g.htFrame] = this.GetSizeWH()
	}
}

//-----------------------------------------------------------------------------
// App
//-----------------------------------------------------------------------------
App = class(wx.App) {
	OnInit() = {
		LoadConfig()
		InitializeResource()
		frame = Frame('Getter Photo'$)
		frame.Show()
		g.frame = frame
		true
	}
	OnExit() = {
		SaveConfig()
		0
	}
}

wx.IMPLEMENT_APP(App)
